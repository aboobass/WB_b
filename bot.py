from aiogram.types import InputFile, ReplyKeyboardMarkup, KeyboardButton
import pytz
from datetime import time as t, datetime, timedelta
import asyncio
import logging
import json
import os
import gspread
import time
import requests
import aiohttp
import pandas as pd
import tempfile
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram.utils.exceptions import MessageNotModified


from config import API_TOKEN, CONFIG_URL, ADMIN_IDS, CREDS, CONFIG_SHEET_ID
from Wb_bot import get_available_users_from_config, get_user_cabinets, generate_report, main_from_config
from WB_orders import get_wb_product_cards

# –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
main_menu_keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
scheduler = AsyncIOScheduler()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

# –í—Ä–µ–º—è –æ—Ç—á–µ—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (6:00 –ú–°–ö)
DEFAULT_TIME = t(6, 0, tzinfo=MOSCOW_TZ)

# –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = "user_data.json"

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã
SUBSCRIPTION_PRICE = 500
YOOKASSA_PAYMENT_URL = "https://yookassa.ru/"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserRegistrationStates(StatesGroup):
    WAITING_API_KEY = State()
    WAITING_CABINET_NAME = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–∞
class AddCabinetStates(StatesGroup):
    WAITING_API_KEY = State()
    WAITING_CABINET_NAME = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–∞–º–∏
class ManageCabinetStates(StatesGroup):
    SELECT_CABINET = State()
    ACTION_CHOICE = State()
    WAITING_NEW_NAME = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
class SupportStates(StatesGroup):
    WAITING_QUESTION = State()
    WAITING_REPLY = State()

class BroadcastStates(StatesGroup):
    WAITING_MESSAGE = State()
    CONFIRMATION = State()


# –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
EMAIL_REGEX = r"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets API
gc = gspread.authorize(CREDS)

def get_cancel_keyboard():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action"))
    return kb

def get_cancel_admin_keyboard():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action_admin"))
    return kb

def validate_cabinet_name(name: str) -> bool:
    return name.isidentifier() and (1 <= len(name.strip()) <= 50)

async def validate_wb_api_key(api_key: str) -> bool:
    url_stat = "https://seller-analytics-api.wildberries.ru/ping"
    url_ads = "https://advert-api.wildberries.ru/ping"
    headers = {"Authorization": api_key}

    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url_stat, headers=headers) as response_stat:
                if response_stat.status != 200:
                    return False
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–∞ (stat): {e}")
            return False

        try:
            async with session.get(url_ads, headers=headers) as response_ads:
                if response_ads.status != 200:
                    return False
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–∞ (ads): {e}")
            return False

    return True

class UserDataCache:
    def __init__(self):
        self.user_lk_cache = {}
        self.config_cache = None
        self.user_mapping = {}
        self.user_spreadsheet_urls = {}

    async def load_data(self):
        if os.path.exists(DATA_FILE):
            try:
                with open(DATA_FILE, 'r') as f:
                    data = json.load(f)
                    self.user_mapping = {int(k): v for k, v in data.get('user_mapping', {}).items()}
                    self.user_spreadsheet_urls = data.get('user_spreadsheet_urls', {})
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

    async def save_data(self):
        data = {
            'user_mapping': self.user_mapping,
            'user_spreadsheet_urls': self.user_spreadsheet_urls
        }
        try:
            with open(DATA_FILE, 'w') as f:
                json.dump(data, f)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

    async def update_config_cache(self):
        try:
            users = get_available_users_from_config(CONFIG_URL)
            config = {}
            for user in users:
                cabinets = get_user_cabinets(CONFIG_URL, user)
                config[user] = cabinets
            self.config_cache = config
            logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω –∫—ç—à –¥–ª—è –≤—Å–µ—Ö")
            return config
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return None

    async def update_user_in_cache(self, username: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            cabinets = get_user_cabinets(CONFIG_URL, username)
            if self.config_cache is None:
                self.config_cache = {}
            self.config_cache[username] = cabinets
            logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω –∫—ç—à –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {e}")

    async def get_config_cache(self):
        if self.config_cache is None:
            await self.update_config_cache()
        return self.config_cache

    # async def get_user_cabinets(self, username: str):
    #     config = await self.get_config_cache()
    #     return config.get(username, []) if config else []

    async def get_user_cabinets(self, username: str):
        # –ï—Å–ª–∏ –∫—ç—à –ø—É—Å—Ç–æ–π - –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é
        if self.config_cache is None:
            await self.update_config_cache()
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –∫—ç—à–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
        if username in self.config_cache:
            return self.config_cache[username]
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
        await self.update_user_in_cache(username)
        return self.config_cache.get(username, [])

    async def get_available_users(self):
        config = await self.get_config_cache()
        return list(config.keys()) if config else []

    async def get_available_users_for_user(self, telegram_id: int):
        return [self.user_mapping.get(telegram_id)]

    async def bind_user(self, telegram_id: int, username: str):
        self.user_mapping[telegram_id] = username
        await self.save_data()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞
cache = UserDataCache()

def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

async def show_main_menu(chat_id, message_text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"):
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("üìä –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç", callback_data="get_report"),
        InlineKeyboardButton("üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–∞–º–∏", callback_data="manage_cabinets"),
    )
    kb.row(
        InlineKeyboardButton("üìπ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="show_instruction"),
        InlineKeyboardButton("üìã –ú–æ—è —Ç–∞–±–ª–∏—Ü–∞", callback_data="show_spreadsheet")
    )
    kb.row(
        InlineKeyboardButton("‚ùì –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq"),
        InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")
    )
    await bot.send_message(chat_id, message_text, reply_markup=kb)

async def show_all_menu(chat_id, message_text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:"):
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–ê–¥–º–∏–Ω", callback_data="admin_call"))
    kb.add(InlineKeyboardButton("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", callback_data="user_call"))
    await bot.send_message(chat_id, message_text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "admin_call")
async def show_admin_menu_callback(callback: types.CallbackQuery):
    msg = callback.message
    await show_admin_menu(msg.chat.id)
    await msg.delete()


@dp.callback_query_handler(lambda c: c.data == "user_call")
async def show_user_menu_callback(callback: types.CallbackQuery):
    msg = callback.message
    await show_main_menu(msg.chat.id)
    await msg.delete()


async def show_admin_menu(chat_id, message_text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"):
    admin_kb = InlineKeyboardMarkup()
    admin_kb.row(
        InlineKeyboardButton("üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users"),
        InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users_list")
    )
    admin_kb.add(InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"))
    await bot.send_message(chat_id, message_text, reply_markup=admin_kb)


@dp.callback_query_handler(lambda c: c.data == "subscribe")
async def subscribe_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=YOOKASSA_PAYMENT_URL))
    kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    message = (
        "ü§ñ *–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç?*\n\n"
        "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ Wildberries:\n"
        "‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –≤ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è\n"
        "‚úÖ –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –∞—Ä—Ç–∏–∫—É–ª—É\n"
        "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö\n"
        "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫—É –¥–æ 7 –ª–∏—á–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: *{SUBSCRIPTION_PRICE} —Ä—É–±./–º–µ—Å—è—Ü*\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç"
    )
    await bot.send_message(
        user_id,
        message,
        parse_mode="Markdown",
        reply_markup=kb
    )
    try:
        await callback.answer()
    except:
        pass

@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    await cache.load_data()

    if is_admin(user_id) and cache.user_mapping.get(user_id):
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",)
        await show_all_menu(message.chat.id)
        return

    if cache.user_mapping.get(user_id):
        await message.answer("üëã –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ 7 –ª–∏—á–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤")
        await show_main_menu(message.chat.id)
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ —Å –∫–Ω–æ–ø–∫–æ–π "–û–∑–Ω–∞–∫–æ–º–∏–ª—Å—è"
    first_video_url = "https://rutube.ru/video/b0a93b772b8b9867a3e88d0df9e3bf5c/"
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–û–∑–Ω–∞–∫–æ–º–∏–ª—Å—è", callback_data="watched_first_video"))
    await message.answer(
        f"üìπ –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏:\n{first_video_url}",
        reply_markup=kb
    )


@dp.callback_query_handler(lambda c: c.data == "show_instruction")
async def show_instruction_callback(callback: types.CallbackQuery):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    msg = callback.message
    try:
        await callback.answer()
    except:
        pass
    video_url = "https://rutube.ru/video/7d44d613016e0a0d3c3a6bbe61517319/"
    await msg.answer(f"üìπ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n{video_url}")
    await show_main_menu(msg.chat.id)
    

@dp.callback_query_handler(lambda c: c.data == "watched_first_video")
async def watched_first_video_handler(callback: types.CallbackQuery):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ –≤–∏–¥–µ–æ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞—á–∞—Ç—å"
    try:
        await callback.answer()
    except:
        pass
    second_video_url = "https://rutube.ru/video/7d44d613016e0a0d3c3a6bbe61517319/"
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–ù–∞—á–∞—Ç—å", callback_data="start_registration"))
    try:
        await callback.message.edit_text(
            f"üìπ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n{second_video_url}",
            reply_markup=kb
        )
    except MessageNotModified:
        pass
    except:
        await callback.message.answer(
            f"üìπ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n{second_video_url}",
            reply_markup=kb
        )
    


@dp.callback_query_handler(lambda c: c.data == "start_registration")
async def start_registration_handler(callback: types.CallbackQuery):
    # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    try:
        await callback.answer()
    except:
        pass
    instruction_photo = InputFile("instruction.jpg")
    await bot.send_photo(callback.message.chat.id, instruction_photo)
    await callback.message.answer(
        "üëã –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à WB API –∫–ª—é—á (–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ):",
        reply_markup=get_cancel_keyboard()
    )
    await UserRegistrationStates.WAITING_API_KEY.set()


@dp.callback_query_handler(lambda c: c.data == "show_spreadsheet")
async def show_spreadsheet_callback(callback: types.CallbackQuery):
    msg = callback.message
    user_id = callback.from_user.id
    username = cache.user_mapping.get(user_id)
    if not username:
        await callback.answer("‚ùå –í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∞–∫–∫–∞—É–Ω—Ç—É", show_alert=True)
        return
    try:
        await bot.delete_message(
            chat_id=msg.chat.id,
            message_id=msg.message_id)
    except:
        pass
    try:
        await callback.answer()
    except:
        pass
    spreadsheet_url = cache.user_spreadsheet_urls.get(username)
    if spreadsheet_url:
        message = (
            "üìä –í–∞—à–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏:\n"
            f"{spreadsheet_url}\n\n"
            "–í —ç—Ç–æ–π —Ç–∞–±–ª–∏—Ü–µ –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "1. –í–∏–¥–µ—Ç—å –≤—Å–µ –≤–∞—à–∏ –∞—Ä—Ç–∏–∫—É–ª—ã\n"
            "2. –ó–∞–ø–æ–ª–Ω—è—Ç—å —Å—Ç–æ–ª–±—Ü—ã '–ü—Ä–∏–±—ã–ª—å' –∏ '–í—ã–∫—É–ø–∞–µ–º–æ—Å—Ç—å'\n"
            "3. –ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –æ—Ç—á–µ—Ç—ã"
        )
        await bot.send_message(user_id, message)
    else:
        await callback.answer("‚ùå –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
    await show_main_menu(msg.chat.id)

@dp.callback_query_handler(lambda c: c.data == "cancel_action", state="*")
async def cancel_action_handler(callback: types.CallbackQuery, state: FSMContext):
    msg = callback.message
    try:
        await callback.answer()
    except:
        pass
    await state.finish()
    await show_main_menu(msg.chat.id)

@dp.callback_query_handler(lambda c: c.data == "cancel_action_admin", state="*")
async def cancel_action_admin_handler(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
    except:
        pass
    await state.finish()
    await show_admin_menu(callback.message.chat.id)
    try:
        await callback.message.delete()
    except:
        pass

@dp.message_handler(commands=["add_cabinet"])
async def add_cabinet_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    
    username = cache.user_mapping.get(user_id)
    if not username:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —Å –ø–æ–º–æ—â—å—é /start")
        return

    cabinets = await cache.get_user_cabinets(username)
    if len(cabinets) > 6:
        await message.answer("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 7 –∫–∞–±–∏–Ω–µ—Ç–æ–≤")
        return

    instruction_photo = InputFile("instruction.jpg")
    await bot.send_photo(message.chat.id, instruction_photo)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ WB API –∫–ª—é—á (–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ) –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞:", reply_markup=get_cancel_keyboard())
    async with state.proxy() as data:
        data['username'] = username
    await AddCabinetStates.WAITING_API_KEY.set()

@dp.message_handler(state=AddCabinetStates.WAITING_API_KEY)
async def process_cabinet_api_key(message: types.Message, state: FSMContext):
    api_key = message.text.strip()
    if not api_key:
        await message.answer("‚ùå API –∫–ª—é—á –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return

    msg = await message.answer("‚è≥ –û–∂–∏–¥–∞–π—Ç–µ 30 —Å–µ–∫—É–Ω–¥, –∏–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞...")
    if not (await validate_wb_api_key(api_key)):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    async with state.proxy() as data:
        data['api_key'] = api_key

    await AddCabinetStates.next()
    try:
        await msg.edit_text("‚úÖ –ö–ª—é—á –ø—Ä–∏–Ω—è—Ç! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞:", reply_markup=get_cancel_keyboard())
    except MessageNotModified:
        pass
    except:
        await bot.send_message(message.chat.id, "‚úÖ –ö–ª—é—á –ø—Ä–∏–Ω—è—Ç! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞:", reply_markup=get_cancel_keyboard())


@dp.message_handler(state=AddCabinetStates.WAITING_CABINET_NAME)
async def process_new_cabinet_name(message: types.Message, state: FSMContext):
    cabinet_name = message.text.strip()
    if not validate_cabinet_name(cabinet_name):
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–∞ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –±—É–∫–≤—ã, —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä –∏ –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 50 —Å–∏–º–≤–æ–ª–æ–≤!")
        return

    async with state.proxy() as data:
        username = data['username']
        api_key = data['api_key']

    wait_message = await message.answer("üîÑ –û–∂–∏–¥–∞–π—Ç–µ 30 —Å–µ–∫, –∏–¥—ë—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–æ–≤...", reply_markup=main_menu_keyboard)
    try:
        articles = await get_wb_articles(api_key)
        success = await add_cabinet_to_user(username, api_key, cabinet_name, articles)
        if success:
            response = f"‚úÖ –ö–∞–±–∏–Ω–µ—Ç '{cabinet_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! –ê—Ä—Ç–∏–∫—É–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≤–∞—à—É —Ç–∞–±–ª–∏—Ü—É."
        else:
            response = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        
        await message.answer(response)
        await show_main_menu(message.chat.id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–±–∏–Ω–µ—Ç–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–±–∏–Ω–µ—Ç–∞")
    finally:
        await state.finish()
        try:
            await bot.delete_message(message.chat.id, wait_message.message_id)
        except:
            pass

@dp.message_handler(state=UserRegistrationStates.WAITING_API_KEY)
async def process_registration_api_key(message: types.Message, state: FSMContext):
    api_key = message.text.strip()
    if not api_key:
        await message.answer("‚ùå API –∫–ª—é—á –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return

    msg = await message.answer("‚è≥ –û–∂–∏–¥–∞–π—Ç–µ 30 —Å–µ–∫—É–Ω–¥, –∏–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞...")
    if not (await validate_wb_api_key(api_key)):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    async with state.proxy() as data:
        data['api_key'] = api_key

    await UserRegistrationStates.next()
    try:
        await msg.edit_text("‚úÖ –ö–ª—é—á –ø—Ä–∏–Ω—è—Ç! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞:", reply_markup=get_cancel_keyboard())
    except MessageNotModified:
        pass


@dp.message_handler(state=UserRegistrationStates.WAITING_CABINET_NAME)
async def process_registration_cabinet_name(message: types.Message, state: FSMContext):
    cabinet_name = message.text.strip()
    if not validate_cabinet_name(cabinet_name):
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–∞ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –±—É–∫–≤—ã, —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä –∏ –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 50 —Å–∏–º–≤–æ–ª–æ–≤!")
        return

    async with state.proxy() as data:
        api_key = data['api_key']

    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    username = f"user_{message.from_user.id}"

    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –∏–∑ –ø—É–ª–∞
    spreadsheet_info = get_available_spreadsheet(username)
    if not spreadsheet_info:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        await state.finish()
        return

    # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø
    await grant_spreadsheet_access(spreadsheet_info['id'])

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    await add_user_to_config(
        username,
        api_key,
        cabinet_name,
        spreadsheet_info['url']
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    cache.user_spreadsheet_urls[username] = spreadsheet_info['url']
    await cache.bind_user(message.from_user.id, username)
    await cache.save_data()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
    spreadsheet = gc.open_by_url(spreadsheet_info['url'])
    
    articles = await get_wb_articles(api_key)
    success = await add_cabinet_sheet(spreadsheet, cabinet_name, articles)
    
    if success:
        await message.answer(
            "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"‚Ä¢ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç: {username}\n"
            f"‚Ä¢ –í–∞—à –∫–∞–±–∏–Ω–µ—Ç: {cabinet_name}\n"
            f"‚Ä¢ –í–∞—à–∞ —Ç–∞–±–ª–∏—Ü–∞: {spreadsheet_info['url']}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –¥–æ 7 –ª–∏—á–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤"
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã")

    await state.finish()
    await show_main_menu(message.chat.id)


@dp.callback_query_handler(lambda c: c.data == "get_report")
async def get_report_callback(callback: types.CallbackQuery):
    msg = callback.message
    try:
        await callback.answer()
    except:
        pass
    user_id = callback.from_user.id
    logging.info(f"{user_id} | –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç'")
    users = await cache.get_available_users_for_user(user_id)
    logging.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users}")
    if not users or not users[0]:
        try:
            await msg.edit_text("‚ö†Ô∏è –í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –Ω–∏ –∫ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        except MessageNotModified:
            pass
        logging.error(f"{user_id}  users = {users}")
        await show_main_menu(msg.chat.id)
        return

    username = users[0]
    cabinets = await cache.get_user_cabinets(username)
    logging.info(f"–ö–∞–±–∏–Ω–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {cabinets}")

    if not cabinets:
        try:
            await msg.edit_text(f"‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–∏—á–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤.")
        except MessageNotModified:
            pass
        logging.error(f"{user_id}  cabinets = {cabinets}")
        await show_main_menu(msg.chat.id)
        return

    keyboard = InlineKeyboardMarkup(row_width=1)

    for cabinet in cabinets:
        keyboard.add(InlineKeyboardButton( 
            text=cabinet, callback_data=f"get_report:{username}:{cabinet}"))
        logging.info(f"{user_id} –ö–∞–±–∏–Ω–µ—Ç {cabinet} –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∫–ª–∞–≤–∏–Ω–∞—Ç—É—Ä–µ")
    
    keyboard.add(InlineKeyboardButton(
        text="–í—Å–µ", callback_data=f"get_report:{username}:all"))

    keyboard.add(InlineKeyboardButton(
        "üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    
    logging.info(f"{user_id} –í—Å–µ –∫–∞–±–∏–Ω–µ—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ –∫–ª–∞–≤–∏–Ω–∞—Ç—É—Ä–µ")
    try:
        logging.info(f"{user_id} –î–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è")
        await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:", reply_markup=keyboard)
        logging.info(f"{user_id} –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è")
    except MessageNotModified:
        logging.error(f"{user_id} MessageNotModified ")
        pass
    except:
        logging.info(f"{user_id} –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è")
        await bot.send_message(callback.from_user.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:", reply_markup=keyboard)
        logging.info(f"{user_id} –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    logging.info(f"{user_id} SUCCESS")
        
@dp.callback_query_handler(lambda c: c.data == "back_to_main")
async def back_to_main_callback(callback: types.CallbackQuery):
    try:
        await callback.answer()
    except:
        pass
    await show_main_menu(callback.message.chat.id)
    try:
        await callback.message.delete()
    except:
        pass

async def send_report_as_file(chat_id: int, username: str, cabinet_name: str, df: pd.DataFrame, summary: str):
    try:
        with tempfile.NamedTemporaryFile(suffix='.xlsx', delete=False) as temp_file:
            file_path = temp_file.name

        with pd.ExcelWriter(file_path, engine='xlsxwriter') as writer:
            df = df.fillna(value=" –í–ù–ï–°–ò–¢–ï")
            df.to_excel(writer, sheet_name='–û—Ç—á–µ—Ç', index=False)
            workbook = writer.book
            worksheet = writer.sheets['–û—Ç—á–µ—Ç']

            for idx, col in enumerate(df.columns):
                max_len = max(
                    df[col].astype(str).map(len).max(),
                    len(str(col))
                )
                worksheet.set_column(idx, idx, max_len + 2)

            start_row = len(df) + 3
            header_format = workbook.add_format({
                'bold': True,
                'font_size': 10,
                'bottom': 1
            })
            value_format = workbook.add_format({
                'font_size': 12,
                'align': 'right',
                'num_format': '#,##0.00'
            })

            worksheet.write(start_row, 0, "–°–í–û–î–ö–ê –ü–û –û–¢–ß–ï–¢–£", header_format)
            parts = summary.split(':')
            worksheet.write(start_row, 1, parts[0].strip(), value_format)
            worksheet.write(start_row, 2, parts[1].strip(), value_format)
            worksheet.write(start_row, 3, parts[2].strip(), value_format)

        timestamp = datetime.now().strftime("%Y%m%d %H_%M")
        file_name = f"–û—Ç—á–µ—Ç_{cabinet_name}_{timestamp}.xlsx"
        excel_file = InputFile(file_path, filename=file_name)

        logging.info('–û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª')
        await bot.send_document(
            chat_id=chat_id,
            document=excel_file,
            caption=f"üìä –û—Ç—á–µ—Ç –ø–æ –õ–ö: {cabinet_name}"
        )
        logging.info('–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω')
        os.unlink(file_path)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel-–æ—Ç—á–µ—Ç–∞: {e}")
        await bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel")

@dp.callback_query_handler(lambda c: c.data.startswith("get_report:"))
async def process_report_callback(callback: types.CallbackQuery):
    try:
        await callback.answer()
    except:
        pass
    user_id = callback.from_user.id
    
    parts = callback.data.split(":")
    username = parts[1]
    cabinet = parts[2]

    logging.info(f"{user_id} | –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç—á—ë—Ç–∞ –ø–æ '{cabinet}'")
    try:
        wait_message = await callback.message.edit_text(
            text="üîÑ –§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á—ë—Ç, —ç—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...",
            reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
    except MessageNotModified:
        pass
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        wait_message = await bot.send_message(user_id, "üîÑ –§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á—ë—Ç, —ç—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")

    try:
        if cabinet == "all":
            cabinets = await cache.get_user_cabinets(username)
            if not cabinets:
                await bot.send_message(user_id, f"‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–∏—á–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤.")
                return

            summ = {'costs': 0.0, 'profit': 0.0}
            for cabinet_name in cabinets:
                df, summary = await generate_report(username, cabinet_name, CONFIG_URL)

                
                if summary == "429_error":
                    await bot.send_message(user_id, "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
                    return
                if df is not None and not df.empty:
                    logging.info(f"–ú–µ—Ç—Ä–∏–∫–∏: {summary}")
                    summ_parts = summary.split(':')
                    summ["costs"] += float(summ_parts[1])
                    if pd.notna(summ_parts[2]):
                        summ["profit"] += float(summ_parts[2])

            await bot.send_message(user_id, 
                f"<b>–°—É–º–º–∞—Ä–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –≤—Å–µ–º –∫–∞–±–∏–Ω–µ—Ç–∞–º:</b>\n"
                f"‚Ä¢ –°—É–º–º–∞ –∑–∞—Ç—Ä–∞—Ç: {round(summ['costs'], 2)} —Ä—É–±\n"
                f"‚Ä¢ –°—É–º–º–∞ –ø—Ä–∏–±—ã–ª–∏: {round(summ['profit'], 2)} —Ä—É–±",
                parse_mode="HTML"
            )
        else:
            df, summary = await generate_report(username, cabinet, CONFIG_URL)
            
            if summary == "429_error":
                await bot.send_message(user_id, "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
                return
                
            if df is None or df.empty:
                await bot.send_message(user_id, f"‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ {cabinet}")
            else:
                await send_report_as_file(user_id, username, cabinet, df, summary)
    finally:
        try:
            await bot.delete_message(user_id, wait_message.message_id)
        except:
            pass
    await show_main_menu(callback.message.chat.id)

async def add_articles_to_sheet(worksheet, articles):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∞—Ä—Ç–∏–∫—É–ª—ã –∏ –±–∞—Ä–∫–æ–¥—ã –≤ –ª–∏—Å—Ç —Ç–∞–±–ª–∏—Ü—ã —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π"""
    if not articles:
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
    values = []
    for article in articles:
        values.append(article)

    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–∞—Ç—á–∏ –ø–æ 500 —Å—Ç—Ä–æ–∫
    batch_size = 500
    for i in range(0, len(values), batch_size):
        batch = values[i:i+batch_size]
        try:
            worksheet.append_rows(batch)
            if len(values) > batch_size:
                await asyncio.sleep(1)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤: {e}")

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏
    await sort_sheet(worksheet)

async def sort_sheet(worksheet):
    """–°–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ª–∏—Å—Ç–µ –ø–æ –∫–∞–±–∏–Ω–µ—Ç—É –∏ –∞—Ä—Ç–∏–∫—É–ª—É –ø—Ä–æ–¥–∞–≤—Ü–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        all_values = worksheet.get_all_values()
        if len(all_values) <= 3:  # –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è + –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ + –∑–∞–≥–æ–ª–æ–≤–∫–∏
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–µ —Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏ (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, –ø—É—Å—Ç–∞—è, –∑–∞–≥–æ–ª–æ–≤–∫–∏)
        instruction_row = all_values[0]
        header_row = all_values[2]
        data = all_values[3:]  # –î–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 4-–π —Å—Ç—Ä–æ–∫–∏

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ç–æ–ª–±—Ü—É A (–∫–∞–±–∏–Ω–µ—Ç) –∏ —Å—Ç–æ–ª–±—Ü—É B (–∞—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞)
        sorted_data = sorted(data, key=lambda x: (x[0], x[1], x[2]))
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å—å –ª–∏—Å—Ç
        worksheet.clear()

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        worksheet.append_row(instruction_row)
        worksheet.append_row(header_row, table_range='A3:E3')
        
        if sorted_data:
            worksheet.append_rows(sorted_data)

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        worksheet.format("A1", {
            "textFormat": {
                "bold": True,
                "fontSize": 14
            },
            "horizontalAlignment": "LEFT",
            "wrapStrategy": "WRAP"
        })
        worksheet.merge_cells("A1:E1")
        
        # –°–µ—Ä—ã–π —Ü–≤–µ—Ç –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (—Å—Ç—Ä–æ–∫–∞ 3)
        worksheet.format("A3:E3", {
            "backgroundColor": {
                "red": 0.9,
                "green": 0.9,
                "blue": 0.9
            },
            "textFormat": {
                "bold": True
            }
        })

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ª–∏—Å—Ç–∞: {e}")

async def get_wb_articles(api_key: str):
    headers = {"Authorization": api_key}
    try:
        cards = await get_wb_product_cards(headers)
        nm_ids = [(product['nmID'], product['vendorCode']) for product in cards]
        unique_pairs = set()
        for item in nm_ids:
            nmId = str(item[0])
            supplierArticle = str(item[1])
            if nmId:
                unique_pairs.add((nmId, supplierArticle))

        return list(unique_pairs)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å WB API: {e}")
        return []

def extract_spreadsheet_id(url: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID —Ç–∞–±–ª–∏—Ü—ã –∏–∑ URL"""
    parts = url.split('/')
    for i, part in enumerate(parts):
        if part == 'd' and i + 1 < len(parts):
            return parts[i + 1]
    return url


def get_available_spreadsheet(username: str) -> dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–±–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –∏–∑ –ø—É–ª–∞ –∏ –ø–æ–º–µ—á–∞–µ—Ç –µ–µ –∫–∞–∫ –∑–∞–Ω—è—Ç—É—é"""
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –ø—É–ª–æ–º —Ç–∞–±–ª–∏—Ü
        pool_sheet = gc.open_by_key("1MZeib3KF9TDtH7S6ylfd4VzOLVA-tdcJfjF_HCJDHqY").sheet1
        records = pool_sheet.get_all_values()
        # print(records)
        # –ò—â–µ–º –ø–µ—Ä–≤—É—é —Å–≤–æ–±–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É (–≥–¥–µ —Å—Ç–æ–ª–±–µ—Ü C –ø—É—Å—Ç–æ–π)
        for i, row in enumerate(records):
            if i == 0: continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            if len(row) >= 3 and not row[2].strip():  # –°—Ç–æ–ª–±–µ—Ü C –ø—É—Å—Ç
                url = row[1].strip()
                # –ü–æ–º–µ—á–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–∞–∫ –∑–∞–Ω—è—Ç—É—é
                pool_sheet.update_cell(i + 1, 3, username)
                return {'url': url, 'id': extract_spreadsheet_id(url)}
        return None 
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –ø—É–ª–∞: {e}")
        return None

async def grant_spreadsheet_access(spreadsheet_id: str, email=""):
    try:
        spreadsheet = gc.open_by_key(spreadsheet_id)
        spreadsheet.share(None, perm_type='anyone', role='writer')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞: {e}")

async def add_user_to_config(username: str, api_key: str, cabinet_name: str, spreadsheet_url: str):
    try:
        worksheet = gc.open_by_key(CONFIG_SHEET_ID).sheet1
        worksheet.append_row([username, api_key, cabinet_name, spreadsheet_url])
        # cache.config_cache = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–µ—à –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        await cache.update_user_in_cache(username)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ñ–∏–≥: {e}")

async def add_cabinet_sheet(spreadsheet, cabinet_name: str, articles):
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ª–∏—Å—Ç "–ú–∞—Ä–∂–∞"
        try:
            worksheet = spreadsheet.worksheet("–ú–∞—Ä–∂–∞")
        except gspread.exceptions.WorksheetNotFound:
            # worksheet = spreadsheet.add_worksheet(title="–ú–∞—Ä–∂–∞", rows=1000, cols=5)
            worksheet = spreadsheet.get_worksheet(0)
            worksheet.update_title("–ú–∞—Ä–∂–∞")
            
            instruction = "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å—Ç–æ–ª–±—Ü—ã '–ü—Ä–∏–±—ã–ª—å —Å –µ–¥. —Ç–æ–≤–∞—Ä–∞' –∏ '–í—ã–∫—É–ø–∞–µ–º–æ—Å—Ç—å (%)'. –ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç—á—ë—Ç."
            worksheet.update(range_name='A1', values=[[instruction]])
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å —Å–µ—Ä—ã–º —Ñ–æ–Ω–æ–º
            headers = ["–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", "–ê—Ä—Ç–∏–∫—É–ª WB", "–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞",
                    "–ü—Ä–∏–±—ã–ª—å —Å –µ–¥. —Ç–æ–≤–∞—Ä–∞", "–í—ã–∫—É–ø–∞–µ–º–æ—Å—Ç—å (%)"]
            worksheet.append_row(headers, table_range='A3:E3')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            worksheet.format("A1", {
                "textFormat": {
                    "bold": True,
                    "fontSize": 14
                },
                "horizontalAlignment": "LEFT",
                "wrapStrategy": "WRAP"
            })
            worksheet.merge_cells("A1:E1")
            
            # –°–µ—Ä—ã–π —Ü–≤–µ—Ç –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (—Å—Ç—Ä–æ–∫–∞ 3)
            worksheet.format("A3:E3", {
                "backgroundColor": {
                    "red": 0.9,
                    "green": 0.9,
                    "blue": 0.9
                },
                "textFormat": {
                    "bold": True
                }
            })

            # worksheet.freeze(rows=1)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä—Ç–∏–∫—É–ª—ã
        # articles = get_wb_articles(api_key)
        articles_with_cabinet = [
            [cabinet_name, str(nmId), str(supplierArticle), "", ""]
            for (nmId, supplierArticle) in articles
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—á–∫–∞–º–∏
        batch_size = 500
        for i in range(0, len(articles_with_cabinet), batch_size):
            batch = articles_with_cabinet[i:i + batch_size]
            worksheet.append_rows(batch)
            if len(articles_with_cabinet) > batch_size:
                await asyncio.sleep(1)
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")
        return False


async def add_cabinet_to_user(username: str, api_key: str, cabinet_name: str, articles):
    try:
        spreadsheet_url = cache.user_spreadsheet_urls.get(username)
        if not spreadsheet_url:
            logging.error(f"–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞")
            return False

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        worksheet = gc.open_by_key(CONFIG_SHEET_ID).sheet1
        worksheet.append_row([username, api_key, cabinet_name, spreadsheet_url])
        # cache.config_cache = None
        await cache.update_user_in_cache(username)

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        spreadsheet = gc.open_by_url(spreadsheet_url)
        return await add_cabinet_sheet(spreadsheet, cabinet_name, articles)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–∞: {e}")
        return False


async def get_cabinet_api_key(username: str, cabinet_name: str) -> str:
    try:
        worksheet = gc.open_by_key(CONFIG_SHEET_ID).sheet1
        records = worksheet.get_all_values()
        for row in records:
            if row[0] == username and row[2] == cabinet_name:
                return row[1]
        return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–∞: {e}")
        return None

@dp.callback_query_handler(lambda c: c.data == "manage_cabinets")
async def manage_cabinets_callback(callback: types.CallbackQuery):
    try:
        await callback.answer()
    except:
        pass
    user_id = callback.from_user.id
    logging.info(f"{user_id} | –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–∞–º–∏'")
    username = cache.user_mapping.get(user_id)

    if not username:
        return

    cabinets = await cache.get_user_cabinets(username)
    cabinet_count = len(cabinets) if cabinets else 0

    kb = InlineKeyboardMarkup(row_width=1)
    if cabinet_count < 7:
        kb.add(InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç",
            callback_data="add_cabinet_in_manage"
        ))

    if cabinet_count > 0:
        for cabinet in cabinets:
            kb.add(InlineKeyboardButton(
                text=cabinet,
                callback_data=f"select_cabinet:{cabinet}"
            ))
    else:
        try:
            await callback.message.edit_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞–±–∏–Ω–µ—Ç–æ–≤. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π?",
                reply_markup=kb
            )
            await ManageCabinetStates.SELECT_CABINET.set()
        except MessageNotModified:
            pass
        except:
            await bot.send_message(callback.from_user.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞–±–∏–Ω–µ—Ç–æ–≤. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π?", reply_markup=kb)    
            await ManageCabinetStates.SELECT_CABINET.set()
        return 


    kb.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_manage"))
    try:
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=kb)
        await ManageCabinetStates.SELECT_CABINET.set()
    except MessageNotModified:
        pass
    except:
        await bot.send_message(callback.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=kb)
        await ManageCabinetStates.SELECT_CABINET.set()

@dp.callback_query_handler(lambda c: c.data.startswith("select_cabinet:"), state=ManageCabinetStates.SELECT_CABINET)
async def select_cabinet_callback(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
    except:
        pass
    
    cabinet_name = callback.data.split(":")[1]
    user_id = callback.from_user.id
    username = cache.user_mapping.get(user_id)

    logging.info(f"{user_id} | –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–æ–º '{cabinet_name}'")

    async with state.proxy() as data:
        data['cabinet'] = cabinet_name
        data['username'] = username

    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data="rename_cabinet"),
        InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data="delete_cabinet"),
        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª—ã", callback_data="refresh_articles"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_cabinets")
    )
    try:
        await callback.message.edit_text(
            f"–í—ã–±—Ä–∞–Ω –∫–∞–±–∏–Ω–µ—Ç: {cabinet_name}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=kb
        )
        await ManageCabinetStates.ACTION_CHOICE.set()
    except MessageNotModified:
        pass
    except:
        await bot.send_message(callback.from_user.id, f"–í—ã–±—Ä–∞–Ω –∫–∞–±–∏–Ω–µ—Ç: {cabinet_name}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
        await ManageCabinetStates.ACTION_CHOICE.set()
        
@dp.callback_query_handler(lambda c: c.data == "add_cabinet_in_manage", state=ManageCabinetStates.SELECT_CABINET)
async def add_cabinet_in_manage_callback(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    username = cache.user_mapping.get(user_id)

    if not username:
        await callback.answer("‚ùå –í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∞–∫–∫–∞—É–Ω—Ç—É")
        return

    cabinets = await cache.get_user_cabinets(username)
    cabinet_count = len(cabinets) if cabinets else 0

    if cabinet_count >= 7:
        await callback.answer("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 7 –∫–∞–±–∏–Ω–µ—Ç–æ–≤", show_alert=True)
        return

    try:
        await callback.answer()
    except:
        pass

    try:
        # await callback.message.delete()
        await bot.delete_message(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id)
    except:
        pass
    instruction_photo = InputFile("instruction.jpg")    
    await bot.send_photo(callback.message.chat.id, instruction_photo)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ WB API –∫–ª—é—á (–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ) –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞:", reply_markup=get_cancel_keyboard())
    async with state.proxy() as data:
        data['username'] = username
    await AddCabinetStates.WAITING_API_KEY.set()

@dp.callback_query_handler(lambda c: c.data == "back_to_cabinets", state="*")
async def back_to_cabinets_callback(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
    except:
        pass
    await state.finish()
    await manage_cabinets_callback(callback)

@dp.callback_query_handler(lambda c: c.data == "cancel_manage", state=ManageCabinetStates.all_states)
async def cancel_manage_callback(callback: types.CallbackQuery, state: FSMContext):
    msg = callback.message
    try:
        await callback.answer()
    except:
        pass
    await state.finish()
    await show_main_menu(msg.chat.id)
    try:
        await msg.delete()
    except:
        pass

@dp.callback_query_handler(lambda c: c.data == "rename_cabinet", state=ManageCabinetStates.ACTION_CHOICE)
async def rename_cabinet_callback(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
    except:
        pass
    try:
        # await callback.message.delete()
        await bot.delete_message(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id)
    except:
        pass
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞:", reply_markup=get_cancel_keyboard())
    await ManageCabinetStates.WAITING_NEW_NAME.set()

@dp.message_handler(state=ManageCabinetStates.WAITING_NEW_NAME)
async def process_new_cabinet_name2(message: types.Message, state: FSMContext):
    new_name = message.text.strip()
    user_id = message.from_user.id

    if not validate_cabinet_name(new_name):
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–∞ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –±—É–∫–≤—ã, —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä –∏ –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 50 —Å–∏–º–≤–æ–ª–æ–≤!")
        return

    async with state.proxy() as data:
        old_name = data['cabinet']
        username = data['username']

    wait_message = await message.answer("üîÑ –û–∂–∏–¥–∞–π—Ç–µ 30 —Å–µ–∫, –∏–¥—ë—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–∞", reply_markup=main_menu_keyboard)
    success = await update_cabinet_name(username, old_name, new_name)
    if success:
        await message.answer(f"‚úÖ –ö–∞–±–∏–Ω–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: {old_name} ‚Üí {new_name}")
        # cache.config_cache = None
        await cache.update_user_in_cache(username)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ –∫–∞–±–∏–Ω–µ—Ç–∞")
    await state.finish()
    await show_main_menu(message.chat.id)
    try:
        await bot.delete_message(message.chat.id, wait_message.message_id)
    except:
        pass

async def update_cabinet_name(username: str, old_name: str, new_name: str) -> bool:
    try:
        worksheet = gc.open_by_key(CONFIG_SHEET_ID).sheet1
        records = worksheet.get_all_values()
        for i, row in enumerate(records):
            if row[0] == username and row[2] == old_name:
                worksheet.update_cell(i+1, 3, new_name)
        
        spreadsheet_url = cache.user_spreadsheet_urls.get(username)
        spreadsheet = gc.open_by_url(spreadsheet_url)
        # worksheet_user = spreadsheet.get_worksheet(0)
        worksheet_user = spreadsheet.worksheet("–ú–∞—Ä–∂–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
        all_values = worksheet_user.get_all_values()
        
        for i in range(len(all_values)):
            if all_values[i][0] == old_name:
                all_values[i][0] = new_name
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å—å –ª–∏—Å—Ç –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
        worksheet_user.update(all_values, 'A1')
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–∞: {e}")
        return False

@dp.callback_query_handler(lambda c: c.data == "delete_cabinet", state=ManageCabinetStates.ACTION_CHOICE)
async def delete_cabinet_callback(callback: types.CallbackQuery, state: FSMContext):
    msg = callback.message
    try:
        await callback.answer()
    except:
        pass

    async with state.proxy() as data:
        cabinet_name = data['cabinet']
        username = data['username']

    try:
        wait_message = await msg.edit_text(
            text="üîÑ –û–∂–∏–¥–∞–π—Ç–µ 30 —Å–µ–∫, –∏–¥—ë—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–∞...",
            reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
    except MessageNotModified:
        pass
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ    
        wait_message = await msg.answer("üîÑ –û–∂–∏–¥–∞–π—Ç–µ 30 —Å–µ–∫, –∏–¥—ë—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–∞...", reply_markup=main_menu_keyboard)
    
    success = await delete_cabinet(username, cabinet_name)
    if success:
        await msg.answer(f"‚úÖ –ö–∞–±–∏–Ω–µ—Ç '{cabinet_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω")
        # cache.config_cache = None
        await cache.update_user_in_cache(username)
    else:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–±–∏–Ω–µ—Ç–∞ '{cabinet_name}'")
    await state.finish()
    await show_main_menu(msg.chat.id)
    

    await state.finish()
    try:
        await bot.delete_message(msg.chat.id, wait_message.message_id)
    except:
        pass

async def delete_cabinet(username: str, cabinet_name: str) -> bool:
    try:
        worksheet = gc.open_by_key(CONFIG_SHEET_ID).sheet1
        records = worksheet.get_all_values()
        row_to_delete = None
        for i, row in enumerate(records):
            if row[0] == username and row[2] == cabinet_name:
                row_to_delete = i+1
                break
        if not row_to_delete:
            return False
        worksheet.delete_rows(row_to_delete)
        
        # –£–¥–∞–ª—è–µ–º –∞—Ä—Ç–∏–∫—É–ª—ã –∫–∞–±–∏–Ω–µ—Ç–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        spreadsheet_url = cache.user_spreadsheet_urls.get(username)
        if spreadsheet_url:
            try:
                spreadsheet = gc.open_by_url(spreadsheet_url)
                # worksheet_user = spreadsheet.get_worksheet(0)
                worksheet_user = spreadsheet.worksheet("–ú–∞—Ä–∂–∞")
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
                all_values = worksheet_user.get_all_values()
                
                instruction_row = all_values[0]
                
                header_row = all_values[2]
                data = all_values[3:]  # –î–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 4-–π —Å—Ç—Ä–æ–∫–∏

                worksheet_user.clear()

                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                worksheet_user.append_row(instruction_row)
                worksheet_user.append_row(header_row, table_range='A3:E3')
                
                new_values = [
                    row for row in data 
                    if not row or row[0] != cabinet_name  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü (–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–∞)
                ]
                
                worksheet_user.append_rows(new_values)

                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                worksheet_user.format("A1", {
                    "textFormat": {
                        "bold": True,
                        "fontSize": 14
                    },
                    "horizontalAlignment": "LEFT",
                    "wrapStrategy": "WRAP"
                })
                worksheet_user.merge_cells("A1:E1")
                
                # –°–µ—Ä—ã–π —Ü–≤–µ—Ç –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (—Å—Ç—Ä–æ–∫–∞ 3)
                worksheet_user.format("A3:E3", {
                    "backgroundColor": {
                        "red": 0.9,
                        "green": 0.9,
                        "blue": 0.9
                    },
                    "textFormat": {
                        "bold": True
                    }
                })
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –∫–∞–±–∏–Ω–µ—Ç–∞ {cabinet_name} –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–∞: {e}")
        return False

@dp.callback_query_handler(lambda c: c.data == "refresh_articles", state=ManageCabinetStates.ACTION_CHOICE)
async def refresh_articles_callback(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        cabinet_name = data['cabinet']
        username = data['username']
    msg = callback.message
    api_key = await get_cabinet_api_key(username, cabinet_name)
    if not api_key:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞")
        await state.finish()
        await show_main_menu(msg.chat.id)
        await show_main_menu(callback.message.chat.id)
        return

    spreadsheet_url = cache.user_spreadsheet_urls.get(username)
    if not spreadsheet_url:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        await state.finish()
        await show_main_menu(msg.chat.id)
        return

    try:
        await callback.answer()
    except:
        pass
    try:
        msg = await callback.message.edit_text(
            text="‚è≥ –û–∂–∏–¥–∞–π—Ç–µ 30 —Å–µ–∫—É–Ω–¥, –∏–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞...",
            reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
    except MessageNotModified:
        pass
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ    
        msg = await bot.send_message(callback.from_user.id, "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ 30 —Å–µ–∫—É–Ω–¥, –∏–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞...", reply_markup=main_menu_keyboard)
    try:
        spreadsheet = gc.open_by_url(spreadsheet_url)
        # worksheet = spreadsheet.get_worksheet(0)
        worksheet = spreadsheet.worksheet("–ú–∞—Ä–∂–∞")
        existing_pairs = await get_actual_articles(worksheet)
        new_pairs = set(await get_wb_articles(api_key))
        new_pairs_with_cabinet = set([(cabinet_name, nmId, supplierArticle)
                                      for (nmId, supplierArticle) in new_pairs])
        missing_pairs = list(new_pairs_with_cabinet - existing_pairs)
        if missing_pairs:
            await add_articles_to_sheet(worksheet, missing_pairs)
            await bot.send_message(callback.from_user.id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(missing_pairs)} –Ω–æ–≤—ã—Ö –ø–∞—Ä –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –∏ –±–∞—Ä–∫–æ–¥–æ–≤!")
        else:
            await bot.send_message(callback.from_user.id, "‚ÑπÔ∏è –í—Å–µ –∞—Ä—Ç–∏–∫—É–ª—ã –∏ –±–∞—Ä–∫–æ–¥—ã —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã!")
        try:
            await bot.delete_message(callback.message.chat.id, msg.message_id)
        except:
            pass
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤: {e}")
        await bot.send_message(callback.from_user.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞—Ä—Ç–∏–∫—É–ª–æ–≤")
    await state.finish()

    await show_main_menu(callback.message.chat.id)


async def get_actual_articles(worksheet):
    existing_pairs = set()
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏ (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, –ø—É—Å—Ç–∞—è, –∑–∞–≥–æ–ª–æ–≤–∫–∏)
    records = worksheet.get_all_values()[3:]
    for row in records:
        if len(row) >= 5:
            cabinet = str(row[0]).strip()
            nmId = str(row[1]).strip()
            article = str(row[2]).strip()
            if cabinet and nmId and article:
                existing_pairs.add((cabinet, nmId, article))
    return existing_pairs

async def on_startup(dp):
    await cache.load_data()
    await cache.update_config_cache()
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
    try:
        scheduler.remove_job("daily_config_update")
    except:
        pass

    scheduler.add_job(
        main_from_config,
        'cron',
        hour=0,
        minute=30,
        timezone=MOSCOW_TZ,
        args=[CONFIG_URL],
        id="daily_config_update"
    )
    scheduler.start()

async def on_shutdown(dp):
    scheduler.shutdown()

@dp.callback_query_handler(lambda c: c.data == "faq")
async def faq_callback(callback: types.CallbackQuery):
    await callback.answer("üìö –†–∞–∑–¥–µ–ª —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

@dp.callback_query_handler(lambda c: c.data == "support")
async def support_callback(callback: types.CallbackQuery):
    try:
        await callback.answer()
    except:
        pass
    try:
        await callback.message.delete()
    except: 
        pass
    await callback.message.answer(
        "‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        reply_markup=get_cancel_keyboard()
    )
    await SupportStates.WAITING_QUESTION.set()

@dp.message_handler(state=SupportStates.WAITING_QUESTION)
async def process_support_question(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "–±–µ–∑ username"
    question = message.text

    async with state.proxy() as data:
        data['question'] = question

    for admin_id in ADMIN_IDS:
        try:
            text = (
                f"üÜò –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n"
                f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} ({user_id})\n"
                f"‚Ä¢ –í–æ–ø—Ä–æ—Å: {question}"
            )
            kb = InlineKeyboardMarkup()
            kb.add(InlineKeyboardButton(
                text="‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å",
                callback_data=f"reply_to:{user_id}"
            ))
            await bot.send_message(admin_id, text, reply_markup=kb)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    await message.answer("‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
    await state.finish()

    await show_main_menu(message.chat.id)

@dp.callback_query_handler(lambda c: c.data.startswith("reply_to:"))
async def reply_to_user_callback(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
    except:
        pass
    user_id_to_reply = int(callback.data.split(":")[1])
    async with state.proxy() as data:
        data['user_id_to_reply'] = user_id_to_reply
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_manage"))
    await callback.message.answer(
        f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {user_id_to_reply}):",
        reply_markup=get_cancel_keyboard()
    )
    await SupportStates.WAITING_REPLY.set()

@dp.message_handler(state=SupportStates.WAITING_REPLY)
async def process_support_reply(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        user_id_to_reply = data['user_id_to_reply']
        reply_text = message.text

    try:
        await bot.send_message(
            user_id_to_reply,
            f"üì© –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{reply_text}"
        )
        await message.answer(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_to_reply}")
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@dp.message_handler(lambda message: message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", state="*")
async def main_menu_button_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state:
        await state.finish()
    await show_main_menu(message.chat.id)


@dp.callback_query_handler(lambda c: c.data == "admin_users")
async def  count_users_callback(callback: types.CallbackQuery):
    if is_admin(callback.from_user.id):
        try:
            await callback.message.delete()
        except:
            pass
        await bot.send_message(callback.message.chat.id, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(cache.user_mapping)}")
        await show_admin_menu(callback.message.chat.id)


@dp.callback_query_handler(lambda c: c.data == "admin_users_list")
async def list_users_callback(callback: types.CallbackQuery):
    msg = callback.message
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    try:
        await callback.answer()
    except:
        pass

    try:
        # –°–æ–∑–¥–∞–µ–º DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_data = []
        for telegram_id, username in cache.user_mapping.items():
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Telegram API
                user = await bot.get_chat(telegram_id)
                telegram_username = user.username if user.username else "–Ω–µ—Ç username"
                users_data.append({
                    "telegram_id": telegram_id,
                    "telegram_username": f"@{telegram_username}" if telegram_username != "–Ω–µ—Ç username" else telegram_username
                })
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {telegram_id}: {e}")
                users_data.append({
                    "telegram_id": telegram_id,
                    "telegram_username": "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                })

        df = pd.DataFrame(users_data)

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª Excel
        with tempfile.NamedTemporaryFile(suffix='.xlsx', delete=False) as temp_file:
            file_path = temp_file.name

        with pd.ExcelWriter(file_path, engine='xlsxwriter') as writer:
            df.to_excel(writer, sheet_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', index=False)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            workbook = writer.book
            worksheet = writer.sheets['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏']
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
            worksheet.set_column('A:A', 15)  # telegram_id
            worksheet.set_column('B:B', 25)  # telegram_username
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∂–∏—Ä–Ω—ã–º
            header_format = workbook.add_format({'bold': True})
            for col_num, value in enumerate(df.columns.values):
                worksheet.write(0, col_num, value, header_format)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        timestamp = datetime.now().strftime("%Y%m%d_%H%M")
        file_name = f"–°–ø–∏—Å–æ–∫_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π_{timestamp}.xlsx"
        excel_file = InputFile(file_path, filename=file_name)
        
        await bot.send_document(
            chat_id=callback.from_user.id,
            document=excel_file,
            caption=f"üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ (–≤—Å–µ–≥–æ: {len(df)})"
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(file_path)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await bot.send_message(
            callback.from_user.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        )
    finally:
        await show_admin_menu(callback.message.chat.id)
    try:
        await msg.delete()
    except:
        pass

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å—Å—ã–ª–∫–∞"
@dp.callback_query_handler(lambda c: c.data == "admin_broadcast")
async def broadcast_callback(callback: types.CallbackQuery):
    try:
        await callback.answer()
    except:
        pass
    if is_admin(callback.from_user.id):
        msg = callback.message
        await callback.message.answer(
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
            reply_markup=get_cancel_admin_keyboard()
        )
        try:
            await msg.delete()
        except:
            pass
        await BroadcastStates.WAITING_MESSAGE.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message_handler(state=BroadcastStates.WAITING_MESSAGE)
async def process_broadcast_message(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['message'] = message.text
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm_kb = InlineKeyboardMarkup(row_width=2)
    confirm_kb.add(
        InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_broadcast"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")
    )
    
    await message.answer(
        f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n{message.text}\n\n"
        "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?",
        reply_markup=confirm_kb
    )
    await BroadcastStates.CONFIRMATION.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.callback_query_handler(lambda c: c.data == "confirm_broadcast", state=BroadcastStates.CONFIRMATION)
async def confirm_broadcast(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
    except:
        pass
    admin_id = callback.from_user.id
    async with state.proxy() as data:
        message_text = data['message']
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = cache.user_mapping.keys()
    total = len(users)
    success = 0
    failed = 0
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

    status_msg = await bot.send_message(admin_id, f"üîÑ –ù–∞—á–∞—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∞... 0/{total}")
    
    # –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    for i, user_id in enumerate(users):
        try:
            await bot.send_message(user_id, message_text)
            success += 1
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            failed += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
        if i % 10 == 0:
            try:
                await status_msg.edit_text(
                    f"üîÑ –†–∞—Å—Å—ã–ª–∫–∞... {i+1}/{total}\n"
                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n"
                    f"‚ùå –û—à–∏–±–∫–∏: {failed}"
                )
            except:
                pass
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    await bot.send_message(
        admin_id,
        f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n"
        f"‚Ä¢ –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed}"
    )
    
    try:
        await bot.delete_message(admin_id, status_msg.message_id)
    except:
        pass
    await show_admin_menu(callback.message.chat.id)
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.callback_query_handler(lambda c: c.data == "cancel_broadcast", state=BroadcastStates.CONFIRMATION)
async def cancel_broadcast(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await show_admin_menu(callback.message.chat.id)
    try:
        await callback.message.delete()
    except:
        pass


async def main():
    await on_startup(dp)
    try:
        await dp.start_polling()
    finally:
        await on_shutdown(dp)

if __name__ == "__main__":
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    )
    asyncio.run(main())